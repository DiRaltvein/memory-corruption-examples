// ---------------------------------- LLVM ---------------------------------- \\

SETUP (https://clang.llvm.org/get_started.html)
clone llvm
- mkdir build && cd build
- apt-get update && apt-get install build-essential && apt-get install cmake
- cmake -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" ../llvm
- make
After compiling whole LLVM clang or clang-tidy can be rebuilt separatly
- make clang-tidy OR make clang

// ---------------------------------- Random ---------------------------------- \\


// ---------------------------------- Options used ---------------------------------- \\

[ubuntu 24]
	- gcc
[ubuntu 22]
	- LLVM - /usr/llvm-project/build/bin/clang
	- cppcheck
	- ikos
[ubuntu 20]
	- symbiotic - /usr/symbiotic/scripts/symbiotic

// ---------------------------------- Local notes ---------------------------------- \\

!! Ubuntu 24 does not build llvm
Ubuntu 22 holds llvm
Ubuntu 20 holds symbolic


[ubuntu 22] clang --analyze -ferror-limit=0 /mnt/a/master
- -I/mnt/
[ubuntu 22] clang++ --analyze -ferror-limit=0 /mnt/a/master
- -I/mnt/
[ubuntu 22] clang-tidy /mnt/a/master
- --extra-arg=-I/mnt
- -checks=*
[ubuntu 22] cppcheck --enable=all --suppress=missingIncludeSystem --suppress=unmatchedSuppression --force /mnt/a/master
- -I/mnt/
[ubuntu 20] symbiotic --prp=memsafety --malloc-never-fails -ferror-limit=0 /mnt/a/master
[ubuntu 20] symbiotic-cc --prp=memsafety --malloc-never-fails -ferror-limit=0 /mnt/a/master
- CPPFLAGS='-I/usr/include/clang/10/include'
- CFLAGS='-I/usr/include/clang/10/include'


[ppp] node a.js /mnt/a/master/projects/ppp/pppdump/pppdump.c dumpppp
	- node a.js /mnt/a/master/master/realworld_simplified/ppp.c main
[pacparser] node a.js /mnt/a/master/projects/pacparser/src/pacparser.c pacparser_find_proxy pacparser_find_proxy /mnt/a/master/projects/pacparser/src/spidermonkey/js/src
	- node a.js /mnt/a/master/master/realworld_simplified/pacparser.c main
[gpac] node a.js /mnt/a/master/projects/gpac/src/laser/lsr_dec.c lsr_translate_coords /mnt/a/master/projects/gpac/include
	- node a.js /mnt/a/master/master/realworld_simplified/gpac.c main
[gpac] node a.js /mnt/a/master/projects/gpac/src/filters/load_text.c gf_text_get_utf8_line /mnt/a/master/projects/gpac/include
	- node a.js /mnt/a/master/master/realworld_simplified/gpac_1.c main
[gpssim] node a.js /mnt/a/master/projects/gps-sdr-sim/gpssim.c main
	- node a.js /mnt/a/master/master/realworld_simplified/gps-sdr-sim.c main
[openrazer] node a.js /mnt/a/master/projects/openrazer/driver/razerchromacommon.c razer_chroma_standard_matrix_set_custom_frame
	- node a.js /mnt/a/master/master/realworld_simplified/openrazer.c main
[sofia-sip] node a.js /mnt/a/master/projects/sofia-sip/libsofia-sip-ua/sdp/sdp_parse.c parse_message /mnt/a/master/projects/sofia-sip/libsofia-sip-ua/su /mnt/a/master/projects/sofia-sip/open_c
	- node a.js /mnt/a/master/master/realworld_simplified/sofia-sip.c main
? [zephyr] node a.js /mnt/a/master/projects/zephyr/subsys/fs/fuse_fs_access.c fuse_fs_access_readdir
	- node a.js /mnt/a/master/master/realworld_simplified/zephyr.c main
[nanopb] node a.js /mnt/a/master/projects/nanopb/pb_decode.c pb_dec_string
	- node a.js /mnt/a/master/master/realworld_simplified/nanopb.c main
[json-c] node a.js /mnt/a/master/projects/json-c/apps/json_parse.c parseit /mnt/a/master/projects/json-c
	- node a.js /mnt/a/master/master/realworld_simplified/json-c.c main
? [picotcp] node a.js /mnt/a/master/projects/picotcp/modules/pico_fragments.c pico_fragments_reassemble /mnt/a/master/projects/picotcp/include
	- node a.js /mnt/a/master/master/realworld_simplified/picotcp.c main



// ---------------------------------- CLANG TIDY ---------------------------------- \\

/home/raltvein/packets/llvm-project/clang-tools-extra/clang-tidy	<- clang-tidy that comes with LLVM
- /misc		<- all checks are here
- python3 add_new_check.py <category like performance> <check name> 	<- add new check

clang-tidy array_out_of_bound.c -checks=-*,raltvein


// ---------------------------------- CLANG STATIC ANALYSIS ---------------------------------- \\

To add clang checker (https://clang-analyzer.llvm.org/checker_dev_manual.html)
- /home/raltvein/packets/llvm-project/clang/lib/StaticAnalyzer/Checkers/CMakeLists.txt
	add your checker name into the list and create file in Checkers directory
- /home/raltvein/packets/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/Checkers.td
	add your created checker

see all availible checkers
clang -cc1 -analyzer-checker-help

Run custom clang checker
clang --analyze --analyzer-no-default-checks -Xanalyzer -analyzer-checker="core.RaltveinZero" <file>










# used cves
https://www.cvedetails.com/cve/CVE-2022-4603/
https://www.cvedetails.com/cve/CVE-2019-25078/
https://www.cvedetails.com/cve/CVE-2022-4603/
https://www.cvedetails.com/cve/CVE-2021-37778/
https://www.cvedetails.com/cve/CVE-2022-29021/
https://www.cvedetails.com/cve/CVE-2022-31003/
https://www.cvedetails.com/cve/CVE-2024-0321/
https://www.cvedetails.com/cve/CVE-2023-4260/
https://www.cvedetails.com/cve/CVE-2014-125106/
https://www.cvedetails.com/cve/CVE-2021-32292/
https://www.cvedetails.com/cve/CVE-2021-33304/

https://www.cvedetails.com/vulnerability-list/year-2023/vulnerabilities.html?page=4&opov=1&order=3&trc=1757&sha=4ae91d54bdbef4601bd9c4cdb3252519105763a4
https://www.cvedetails.com/vulnerability-list/year-2023/vulnerabilities.html?page=4&opmemc=1&order=3&trc=2798&sha=56f214f9adef32acf96792d39bffd5607ae3c835

#found cvedetails
https://www.cvedetails.com/cve/CVE-2022-3806/
https://www.cvedetails.com/cve/CVE-2022-28550/


thoughts:
[gpac]. Cppcheck can not find a problem when in the example the exploit is not triggered.
Eg. not 31 is passed to the function but 30. It is strange and I would argue that function should check for it anyway to be secure on its own and not rely
on environment or caller to check its parameters.

A lot of vulnerabilities are bound to some user input or data that comes from outside the application. In that case it is hard to detect memory corruptions because any method

People do not want to use fat pointers but also clang-tidy throws warning on any method that does not perform bound check. (like memcpy)

symbiotic wants a main fucntion that often is not present in single files that are analyzed in a projects
https://www.cvedetails.com/cve/CVE-2023-26489/ lol

Sometimes I found additional vulnerabilities such as memory leak in CVE-2019-25078 using clang